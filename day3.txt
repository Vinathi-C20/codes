1:
#Aim:TO reverse a number
#date=9/3/23

class Reversation:
    def __init__(self):
        self.rev=0
    def accept(self):
        self.n=int(input("enter the number"))
    def process(self):
        while self.n>0:
            r=self.n%10
            self.rev=self.rev*10+r
            self.n=self.n//10
        print("revderse num=",self.rev)

d=Reversation()
d.accept()
d.process()




2:
#Aim:TO find whrther a number is palindrome or not
#date=9/3/23

class Reversation:
    def __init__(self):
       self.rev=0
    def accept(self):
        self.n=int(input("enter the number:"))
        self.num=self.n
    def process(self):
        while self.n>0:
            self.r=self.n%10
            self.rev=self.rev*10+self.r
            self.n=self.n//10
    def output(self):
        if self.num==self.rev:
            print("the number is a palindrome")
        else:
            print("the number is not a palindrome")
d=Reversation()
d.accept()
d.process()
d.output()




3:
#Aim:TO find sum of squares of digits of number


class Sum:
    def __init__(self):
        self.sum=0
    def accept(self):
        self.n=int(input("enter the num:"))
    def process(self):
        while self.n>0:
            r=self.n%10
            self.sum=self.sum+r**2
            self.n=self.n//10
        print("sum of squares of digits is ",self.sum)
       
d=Sum()
d.accept()
d.process()



4:
#Aim:TO find a number is armstrong or not of 3 digit number
#date=9/3/23

class Sum:
    def __init__(self):
        self.sum=0
    def accept(self):
        self.n=int(input("enter the num:"))
        self.num=self.n
    def process(self):
        while self.n>0:
            r=self.n%10
            self.sum=self.sum+r**3
            self.n=self.n//10
        print("sum of squares of digits is ",self.sum)
    def check(self):
        if self.num==self.sum:
            print("the number is armstrong number")
        else:
            print("the number is not armstrong number")
       
d=Sum()
d.accept()
d.process()
d.check()



5:
#Aim:TO find a number of digits in a number
#date=9/3/23
class Sum:
    def __init__(self):
        self.c=0
    def accept(self):
        self.n=int(input("enter the num:"))
    def process(self):
        while self.n>0:
            self.c=self.c+1
            self.n=self.n//10
        print("the number of digits are",self.c)
d=Sum()
d.accept()
d.process()


6:
#Aim:TO find a b power p  (b**p)
#date=9/3/23

class Sum:
    def __init__(self):
        self.c=0 or1
        self.res=1
    def accept(self):
        self.b=int(input("enter the b:"))
        self.p=int(input("enter the p:"))
    def process(self):
        while self.c<self.p:or<=
            self.res=self.res*self.b
            self.c=self.c+1
        print("result",self.res)
d=Sum()
d.accept()
d.process()



7:IMPORTANT

#Aim:TO find a number is armstrong or not

class Demo:
    def __init__(self):
        self.count=0
        self.sum=0
    def accept(self):
        self.n=int(input("en ter the number"))
    def findDigitCount(self):
        num=self.n
        while num>0:
            self.count=self.count+1
            num=num//10
        print("power=",self.count)
        return self.count
    def power(self,b,p):
        result=1
        c=1
        while c<=p:
            result=result*b
            c=c+1
        return result
    def process(self):
        num=self.n
        p=self.findDigitCount()
        while num>0:
            r=num%10
            self.sum=self.sum+self.power(r,p)
            num=num//10
        if self.n==self.sum:
            print("the number is armstrong number")
        else:
            print("the number is not armstrong number")
obj=Demo()
obj.accept()
obj.process()



8:factorial using while loop
class Fact:
    def __init__(self):
        self.c=1
        self.f=1
    def accept(self):
        self.n=int(input("enter the number"))
    def process(self):
        while self.c<=self.n:
            self.f=self.f*self.c
            print("factorial of {} is {}".format(self.c,self.f))
            self.c=self.c+1
            
obj=Fact()
obj.accept()
obj.process()



9:factorial using for loop
class Fact:
    def __init__(self):
        self.c=1
        self.f=1
    def accept(self):
        self.n=int(input("enter the number"))
    def process(self):
        for i in range(1,self.n+1):
            self.f=self.f*self.c
            self.c=self.c+1
         print("factorial of {} is {}".format(self.c,self.f))
            
            
obj=Fact()
obj.accept()
obj.process()


10:





